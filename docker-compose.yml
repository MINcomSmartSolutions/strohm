services:
  postgres:
    container_name: strohm_db
    image: postgres:16.6
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d postgres'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    ports: # For development only, in production we don't need to expose the port
      - "5432:5432"
    environment:
      POSTGRES_DB: "postgres"
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_DEVELOPMENT_PASSWORD}
    volumes:
      - main_db_data:/var/lib/postgresql/data

  node:
    container_name: strohm_backend
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: ${TARGET} # dev production test
    ports:
      - "3000:3000"
    restart:
      always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - NODE_ENV=${TARGET}
      - DB_HOST=postgres
      - DB_NAME=${STROHM_DB}
      - DB_USER=${STROHM_DB_USER}
      - DB_PASSWORD=${STROHM_DB_PASSWORD}
      - DB_PORT=5432

  odoo:
    container_name: strohm_odoo
    image: "ghcr.io/mincomsmartsolutions/odoo:18.0"
    ports:
      - "8069:8069"
    environment:
      LIST_DB: "true"
      PGHOST: postgres
      PGUSER: ${ODOO_DB_USER}
      PGPASSWORD: ${ODOO_DB_DEVELOPMENT_PASSWORD}
      PGDATABASE: ${ODOO_DB}
      ADMIN_PASSWORD: ${ODOO_PASSWORD}
      SMTP_PORT: "1025"
      EMAIL_FROM: ${SMTP_USER}
      PROXY_MODE: "true"
      WITHOUT_DEMO: "${DOODBA_WITHOUT_DEMO-all}"
    tty: true
    volumes: # filestore is used to store attachments, "z" is used to give the container permission to write to the volume
      - odoo-strohm-web-data:/var/lib/odoo
    depends_on:
      postgres:
        condition: service_healthy
    command:
      - odoo
      - --limit-memory-soft=0
      - --limit-time-real-cron=9999999
      - --limit-time-real=9999999
      - --workers=0
      - --dev=reload,qweb,werkzeug,xml

volumes:
  main_db_data:
  odoo-strohm-web-data:
